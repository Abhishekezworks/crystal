import { exportAsMany } from "grafast";

import {
  domainOfCodec,
  enumCodec,
  getCodecByPgCatalogTypeName,
  getInnerCodec,
  isEnumCodec,
  listOfCodec,
  ObjectFromPgTypeColumns,
  PgBaseCodecsObject,
  PgEnumCodecSpec,
  PgRecordTypeCodecSpec,
  PgTypeColumn,
  PgTypeColumnExtensions,
  PgTypeColumns,
  PgTypeColumnVia,
  PgTypeColumnViaExplicit,
  rangeOfCodec,
  recordCodec,
  TYPES,
} from "./codecs.js";
import {
  PgBox,
  PgCircle,
  PgHStore,
  PgInterval,
  PgLine,
  PgLseg,
  PgPath,
  PgPoint,
  PgPolygon,
} from "./codecUtils/index.js";
import {
  makePgSourceOptions,
  makeRegistry,
  makeRegistryBuilder,
  PgCodecRef,
  PgCodecRefExtensions,
  PgCodecRefPath,
  PgCodecRefPathEntry,
  PgCodecRefs,
  PgFunctionSourceOptions,
  PgRegistryBuilder,
  PgSource,
  PgSourceExtensions,
  PgSourceOptions,
  PgSourceParameter,
  PgSourceUnique,
  PgSourceUniqueExtensions,
} from "./datasource.js";
import {
  PgClient,
  PgClientQuery,
  PgClientResult,
  PgExecutor,
  PgExecutorContext,
  PgExecutorContextPlans,
  PgExecutorInput,
  PgExecutorMutationOptions,
  PgExecutorOptions,
  WithPgClient,
} from "./executor.js";
import { BooleanFilterStep } from "./filters/booleanFilter.js";
import { ClassFilterStep } from "./filters/classFilter.js";
import { ManyFilterStep } from "./filters/manyFilter.js";
import { OrFilterStep } from "./filters/orFilter.js";
import {
  KeysOfType,
  MakePgConfigOptions,
  PgClassSingleStep,
  PgCodecRelation,
  PgCodecRelationConfig,
  PgCodecRelationExtensions,
  PgConditionLikeStep,
  PgDecode,
  PgEncode,
  PgEnumTypeCodec,
  PgEnumValue,
  PgGroupSpec,
  PgOrderSpec,
  PgRefDefinition,
  PgRefDefinitionExtensions,
  PgRefDefinitions,
  PgRegistry,
  PgRegistryAny,
  PgSourceParameterAny,
  PgTypeCodec,
  PgTypeCodecAny,
  PgTypeCodecExtensions,
  PgTypeCodecPolymorphism,
  PgTypeCodecPolymorphismRelational,
  PgTypeCodecPolymorphismRelationalTypeSpec,
  PgTypeCodecPolymorphismSingle,
  PgTypeCodecPolymorphismSingleTypeColumnSpec,
  PgTypeCodecPolymorphismSingleTypeSpec,
  PgTypeCodecPolymorphismUnion,
  PgTypeCodecWithColumns,
  PgTypedExecutableStep,
  PlanByUniques,
  TuplePlanMap,
} from "./interfaces.js";
import { PgLockableParameter, PgLockCallback } from "./pgLocker.js";
import {
  pgClassExpression,
  PgClassExpressionStep,
} from "./steps/pgClassExpression.js";
import {
  PgConditionCapableParentStep,
  PgConditionStep,
  PgConditionStepExtensions,
  PgHavingConditionSpec,
  PgWhereConditionSpec,
  pgWhereConditionSpecListToSQL,
} from "./steps/pgCondition.js";
import { PgCursorStep } from "./steps/pgCursor.js";
import { pgDelete, PgDeleteStep } from "./steps/pgDelete.js";
import { pgInsert, PgInsertStep } from "./steps/pgInsert.js";
import { pgPageInfo, PgPageInfoStep } from "./steps/pgPageInfo.js";
import {
  pgPolymorphic,
  PgPolymorphicStep,
  PgPolymorphicTypeMap,
} from "./steps/pgPolymorphic.js";
import {
  digestsFromArgumentSpecs,
  pgSelect,
  PgSelectArgumentDigest,
  PgSelectArgumentSpec,
  pgSelectFromRecords,
  PgSelectIdentifierSpec,
  PgSelectMode,
  PgSelectOptions,
  PgSelectParsedCursorStep,
  PgSelectStep,
  sqlFromArgDigests,
} from "./steps/pgSelect.js";
import {
  pgSelectFromRecord,
  pgSelectSingleFromRecord,
  PgSelectSinglePlanOptions,
  PgSelectSingleStep,
} from "./steps/pgSelectSingle.js";
import {
  pgSingleTablePolymorphic,
  PgSingleTablePolymorphicStep,
} from "./steps/pgSingleTablePolymorphic.js";
import {
  pgUnionAll,
  PgUnionAllSingleStep,
  PgUnionAllSourceSpec,
  PgUnionAllStep,
  PgUnionAllStepCondition,
  PgUnionAllStepConfig,
  PgUnionAllStepConfigAttributes,
  PgUnionAllStepMember,
  PgUnionAllStepOrder,
} from "./steps/pgUnionAll.js";
import { pgUpdate, PgUpdateStep } from "./steps/pgUpdate.js";
import {
  pgValidateParsedCursor,
  PgValidateParsedCursorStep,
} from "./steps/pgValidateParsedCursor.js";
import { TempTableStep } from "./steps/tempTable.js";
import { toPg, ToPgStep } from "./steps/toPg.js";
import {
  withPgClient,
  WithPgClientStep,
  WithPgClientStepCallback,
  withPgClientTransaction,
} from "./steps/withPgClient.js";
import { assertPgClassSingleStep } from "./utils.js";

export {
  assertPgClassSingleStep,
  BooleanFilterStep,
  ClassFilterStep,
  digestsFromArgumentSpecs,
  domainOfCodec,
  enumCodec,
  getCodecByPgCatalogTypeName,
  getInnerCodec,
  isEnumCodec,
  KeysOfType,
  listOfCodec,
  MakePgConfigOptions,
  makePgSourceOptions,
  makeRegistry,
  makeRegistryBuilder,
  ManyFilterStep,
  ObjectFromPgTypeColumns,
  OrFilterStep,
  PgBaseCodecsObject,
  PgBox,
  PgCircle,
  pgClassExpression,
  PgClassExpressionStep,
  PgClassSingleStep,
  PgClient,
  PgClientQuery,
  PgClientResult,
  PgCodecRef,
  PgCodecRefExtensions,
  PgCodecRefPath,
  PgCodecRefPathEntry,
  PgCodecRefs,
  PgCodecRelation,
  PgCodecRelationConfig,
  PgCodecRelationExtensions,
  PgConditionCapableParentStep,
  PgConditionLikeStep,
  PgConditionStep,
  PgConditionStepExtensions,
  PgCursorStep,
  PgDecode,
  pgDelete,
  PgDeleteStep,
  PgEncode,
  PgEnumCodecSpec,
  PgEnumTypeCodec,
  PgEnumValue,
  PgExecutor,
  PgExecutorContext,
  PgExecutorContextPlans,
  PgExecutorInput,
  PgExecutorMutationOptions,
  PgExecutorOptions,
  PgFunctionSourceOptions,
  PgGroupSpec,
  PgHavingConditionSpec,
  PgHStore,
  pgInsert,
  PgInsertStep,
  PgInterval,
  PgLine,
  PgLockableParameter,
  PgLockCallback,
  PgLseg,
  PgOrderSpec,
  pgPageInfo,
  PgPageInfoStep,
  PgPath,
  PgPoint,
  PgPolygon,
  pgPolymorphic,
  PgPolymorphicStep,
  PgPolymorphicTypeMap,
  PgRecordTypeCodecSpec,
  PgRefDefinition,
  PgRefDefinitionExtensions,
  PgRefDefinitions,
  PgRegistry,
  PgRegistryAny,
  PgRegistryBuilder,
  pgSelect,
  PgSelectArgumentDigest,
  PgSelectArgumentSpec,
  pgSelectFromRecord,
  pgSelectFromRecords,
  PgSelectIdentifierSpec,
  PgSelectMode,
  PgSelectOptions,
  PgSelectParsedCursorStep,
  pgSelectSingleFromRecord,
  PgSelectSinglePlanOptions,
  PgSelectSingleStep,
  PgSelectStep,
  pgSingleTablePolymorphic,
  PgSingleTablePolymorphicStep,
  PgSource,
  PgSourceExtensions,
  PgSourceOptions,
  PgSourceParameter,
  PgSourceParameterAny,
  PgSourceUnique,
  PgSourceUniqueExtensions,
  PgTypeCodec,
  PgTypeCodecAny,
  PgTypeCodecExtensions,
  PgTypeCodecPolymorphism,
  PgTypeCodecPolymorphismRelational,
  PgTypeCodecPolymorphismRelationalTypeSpec,
  PgTypeCodecPolymorphismSingle,
  PgTypeCodecPolymorphismSingleTypeColumnSpec,
  PgTypeCodecPolymorphismSingleTypeSpec,
  PgTypeCodecPolymorphismUnion,
  PgTypeCodecWithColumns,
  PgTypeColumn,
  PgTypeColumnExtensions,
  PgTypeColumns,
  PgTypeColumnVia,
  PgTypeColumnViaExplicit,
  PgTypedExecutableStep,
  pgUnionAll,
  PgUnionAllSingleStep,
  PgUnionAllSourceSpec,
  PgUnionAllStep,
  PgUnionAllStepCondition,
  PgUnionAllStepConfig,
  PgUnionAllStepConfigAttributes,
  PgUnionAllStepMember,
  PgUnionAllStepOrder,
  pgUpdate,
  PgUpdateStep,
  pgValidateParsedCursor,
  PgValidateParsedCursorStep,
  PgWhereConditionSpec,
  pgWhereConditionSpecListToSQL,
  PlanByUniques,
  rangeOfCodec,
  recordCodec,
  sqlFromArgDigests,
  TempTableStep,
  toPg,
  ToPgStep,
  TuplePlanMap,
  TYPES,
  WithPgClient,
  withPgClient,
  WithPgClientStep,
  WithPgClientStepCallback,
  withPgClientTransaction,
};

exportAsMany("@dataplan/pg", {
  assertPgClassSingleStep,
  domainOfCodec,
  getInnerCodec,
  enumCodec,
  getCodecByPgCatalogTypeName,
  isEnumCodec,
  listOfCodec,
  rangeOfCodec,
  recordCodec,
  makeRegistryBuilder,
  makeRegistry,
  makePgSourceOptions,
  TYPES,
  PgSource,
  PgExecutor,
  BooleanFilterStep,
  ClassFilterStep,
  ManyFilterStep,
  OrFilterStep,
  pgClassExpression,
  PgClassExpressionStep,
  PgConditionStep,
  pgWhereConditionSpecListToSQL,
  PgCursorStep,
  pgDelete,
  PgDeleteStep,
  pgInsert,
  PgInsertStep,
  pgPageInfo,
  PgPageInfoStep,
  pgPolymorphic,
  PgPolymorphicStep,
  pgSelect,
  digestsFromArgumentSpecs,
  pgSelectFromRecords,
  PgSelectStep,
  sqlFromArgDigests,
  pgSelectFromRecord,
  pgSelectSingleFromRecord,
  PgSelectSingleStep,
  pgSingleTablePolymorphic,
  pgUnionAll,
  PgUnionAllSingleStep,
  PgUnionAllStep,
  PgSingleTablePolymorphicStep,
  pgUpdate,
  PgUpdateStep,
  pgValidateParsedCursor,
  PgValidateParsedCursorStep,
  TempTableStep,
  toPg,
  ToPgStep,
  withPgClient,
  withPgClientTransaction,
  WithPgClientStep,
});
