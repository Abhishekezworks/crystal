type Query {
  forums(
    first: Int
    includeArchived: IncludeArchived = INHERIT
    condition: ForumCondition
    filter: ForumFilter
  ): [Forum]
  forum(id: String!): Forum
  allMessagesConnection(
    condition: MessageCondition
    filter: MessageFilter
    includeArchived: IncludeArchived = INHERIT
    first: Int
    last: Int
    after: String
    before: String
    orderBy: [MessagesOrderBy!]
  ): MessagesConnection
  uniqueAuthorCount(featured: Boolean): Int
  randomUser: User
}

type Forum {
  id: String
  name: String
  isArchived: Boolean
  archivedAtIsNotNull: Boolean
  self: Forum
  messagesList(
    first: Int
    condition: MessageCondition
    filter: MessageFilter
    includeArchived: IncludeArchived = INHERIT
  ): [Message]
  messagesConnection(
    first: Int
    condition: MessageCondition
    filter: MessageFilter
    includeArchived: IncludeArchived = INHERIT
  ): MessagesConnection
  uniqueAuthorCount(featured: Boolean): Int
  randomUser: User
}

type Message {
  featured: Boolean
  body: String
  author: User
  isArchived: Boolean
}

type User {
  username: String
  gravatarUrl: String
}

input MessageCondition {
  featured: Boolean
}

input MessageFilter {
  featured: BooleanFilter
}

input BooleanFilter {
  equalTo: Boolean
  notEqualTo: Boolean
}

enum IncludeArchived {
  INHERIT
  YES
  NO
  EXCLUSIVELY
}

type MessagesConnection {
  edges: [MessageEdge]
  nodes: [Message]
}

type MessageEdge {
  cursor: String
  node: Message
}

input ForumCondition {
  name: String
}

input ForumFilter {
  messages: ForumToManyMessageFilter
}

input ForumToManyMessageFilter {
  some: MessageFilter
}

enum MessagesOrderBy {
  BODY_ASC
  BODY_DESC
  AUTHOR_USERNAME_ASC
  AUTHOR_USERNAME_DESC
}
