# The aim of this test (vs `delete-relational-post.test.graphql`) is that
# because we do not select a computed column we should be able to avoid
# selecting the record/all columns of the record. This will play better with
# column-base select grants.

## expect(queries[0].text).not.toContain('__relational_posts__::text')
## expect(queries[0].text).toContain('__relational_posts__."title"::text')

## expect(errors).toBeFalsy()

## expect(data.d1.post.id).toEqual(4)
## expect(data.d1.post.title).toEqual('Better planning')
## expect(data.d1.post.description).toEqual(null)
## expect(data.d1.post.note).toEqual(null)

## expect(data.d2).toBe(null)
## expect(errors).toBeFalsy()

mutation {
  d1: deleteRelationalPostById(input: { id: 4 }) {
    ...Result
  }

  # Try and delete a record that doesn't exist
  d2: deleteRelationalPostById(input: { id: 3141592 }) {
    ...Result
  }
}

fragment Result on DeleteRelationalPostByIdPayload {
  id
  post {
    id
    title
    description
    note
    # NO COMPUTED COLUMNS (see note at top)

    createdAt
    author {
      personId
      username
    }
  }
}
